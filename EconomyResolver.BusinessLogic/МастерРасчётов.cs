using EconomyResolver.BusinessLogic.Enums;
using System;
using System.Globalization;
using System.Linq;
using Пз = EconomyResolver.BusinessLogic.Показатель;

namespace EconomyResolver.BusinessLogic
{
    public static class МастерРасчётов
    {
        public static Пз НДС { get; private set; } = Пз.Новый("НДС", 20, ЕдиницаИзмерения.Проценты);

        public static Пз КоэффициентДоплатыОсновныхРабочих { get; private set; }
            = Пз.Новый("НДС", 30, ЕдиницаИзмерения.Проценты);

        public static Пз КоэффициентДоплатыВспомогательныхРабочих { get; private set; }
            = Пз.Новый("КоэффициентДоплатыВспомогательныхРабочих", 30, ЕдиницаИзмерения.Проценты);

        public static Пз КоэффициентДоплатыСпециалистов { get; private set; }
            = Пз.Новый("КоэффициентДоплатыСпециалистов", 20, ЕдиницаИзмерения.Проценты);

        public static Пз КоэффициентДоплатыСлужащих { get; private set; }
            = Пз.Новый("КоэффициентДоплатыСлужащих", 20, ЕдиницаИзмерения.Проценты);

        public static Пз РазмерДополнительнойЗарплаты { get; private set; }
            = Пз.Новый("РазмерДополнительнойЗарплаты", 11, ЕдиницаИзмерения.Проценты);

        private static readonly Calendar _calendar = new GregorianCalendar();

        public static int ДниВТекущемГоду() => _calendar.GetDaysInYear(DateTime.Now.Year);

        #region 2.1 Расчёт производственной программы

        public static Пз ПолучитьВпл(Пз М, Пз Ким)
        {
            var значение = Math.Floor(М.Значение * Ким.Значение);
            return Пз.Новый("Впл", значение, ЕдиницаИзмерения.Штуки);
        }

        public static Пз ПолучитьВплВРуб(Пз Впл, Пз Сед)
        {
            var значение = Math.Round(Впл.Значение * Сед.Значение, 2);
            return Пз.Новый("ВплВРуб", значение);
        }

        public static Пз ПолучитьМ(Пз Тмакс, Пз n, Пз Нвр)
        {
            if (Нвр.Значение == 0)
                throw new DivideByZeroException("Аргумент Нвр не должен быть равен 0.");
            
            var значение = Math.Floor(Тмакс.Значение * n.Значение / Нвр.Значение);
            return Пз.Новый("М", значение, ЕдиницаИзмерения.Штуки);
        }

        public static Пз ПолучитьТмакс(Пз Тп, Пз Тв, Пз Тсм, Пз n, Пз а)
        {
            if (а.Значение < 0 || а.Значение > 1)
                throw new ArgumentException(nameof(а), "Аргумент А должен быть от 0 до 100.");

            var Тк = ДниВТекущемГоду();
            var значение = Math.Round((Тк - Тп.Значение - Тв.Значение) * Тсм.Значение * n.Значение * (1 - а.Значение), 2);
            return Пз.Новый("Тмакс", значение, ЕдиницаИзмерения.Часы);
        }

        #endregion

        #region 2.2 Расчёт основной заработной платы

        public static Пз ПолучитьРасценку(Пз Нвр, Пз Сч)
        {
            var значение = Math.Round(Нвр.Значение * Сч.Значение, 2);
            return Пз.Новый("Расценка", значение);
        }

        public static Пз ПолучитьЗарплатуОсновныхРабочихСдельщиков(Пз Р, Пз Впл)
        {
            var значение = Math.Round(Р.Значение * Впл.Значение, 2);
            return Пз.Новый("ЗарплатаОсновныхРабочихСдельщиков", значение);
        }

        public static Пз ПолучитьТэф(Пз Тп, Пз Тв, Пз Тсм)
        {
            var Тк = ДниВТекущемГоду();
            var Тд = Math.Round(Тк * 0.04);
            var значение = Math.Round((Тк - Тп.Значение - Тв.Значение - Тд) * Тсм.Значение, 2);
            return Пз.Новый("Тэф", значение, ЕдиницаИзмерения.Часы);
        }

        public static Пз ПолучитьЧислоОсновныхРабочих(Пз Впл, Пз Нвр, Пз Тэф)
        {
            if (Тэф.Значение == 0)
                throw new DivideByZeroException("Аргумент Тэф не должен быть равен 0.");
            
            var значение = (int)Math.Floor(Впл.Значение * Нвр.Значение / Тэф.Значение);
            return Пз.Новый("ЧислоОсновныхРабочих", значение, ЕдиницаИзмерения.Люди);
        }

        public static Пз ПолучитьЗарплатуВспомогательныхРабочих(Пз Чвсп_р, Пз Тэф, Пз Сч)
        {
            var значение = Чвсп_р.Значение * Тэф.Значение * Сч.Значение;
            return Пз.Новый("ЗарплатаВспомогательныхРабочих", значение);
        }

        public static Пз ПолучитьЗарплатуСпециалистовИлиСлужащих(Пз ДолжностнойОклад)
        {
            var значение = ДолжностнойОклад.Значение * 12;
            return Пз.Новый("ЗарплатаСпециалистовИлиСлужащих", значение);
        }

        public static Пз ПолучитьИтого(params Пз[] СписокЗарплат)
        {
            var ЕдиницаИзмерения = СписокЗарплат[0].ЕдиницаИзмерения;
            if (СписокЗарплат.Any(з => з.ЕдиницаИзмерения != ЕдиницаИзмерения))
                throw new ArgumentException("Все элемента переданного списка должны измеряться в {ЕдиницаИзмерения}");

            var Значение = Math.Round(СписокЗарплат.Sum(п => п.Значение), 2);
            return Пз.Новый("Итого", Значение, ЕдиницаИзмерения);
        }

        private static Пз ПолучитьДоплату(Пз Зарплата, Пз Коэффициент)
        {
            var значение = Math.Round(Зарплата.Значение * Коэффициент.Значение, 2);
            return Пз.Новый("Доплата", значение);
        }

        public static Пз ПолучитьДоплатуОсновныхРабочих(Пз ЗаработнаяПлатаОсновныхРабочих)
            => ПолучитьДоплату(ЗаработнаяПлатаОсновныхРабочих, КоэффициентДоплатыОсновныхРабочих);

        public static Пз ПолучитьДоплатуВспомотельныхРабочих(Пз ЗаработнаяПлатаВспомогательныхРабочих)
            => ПолучитьДоплату(ЗаработнаяПлатаВспомогательныхРабочих, КоэффициентДоплатыВспомогательныхРабочих);

        public static Пз ПолучитьДоплатуСпециалистов(Пз ЗаработнаяПлатаСпециалистов)
            => ПолучитьДоплату(ЗаработнаяПлатаСпециалистов, КоэффициентДоплатыСпециалистов);

        public static Пз ПолучитьДоплатуСлужащих(Пз ЗаработнаяПлатаСлужащих)
            => ПолучитьДоплату(ЗаработнаяПлатаСлужащих, КоэффициентДоплатыСлужащих);

        public static Пз ПолучитьСреднююЗарплатуРабочих(Пз ЗаработнаяПлатаРабочих, Пз ЧислоРабочих)
        {
            var значение = Math.Round(ЗаработнаяПлатаРабочих.Значение / ЧислоРабочих.Значение * 12, 2);
            return Пз.Новый("СредняяЗарплатаРабочих", значение);
        }

        #endregion

        #region 2.3 Расчёт дополнительной заработной платы и отчислений в страховые внебюджетные фонды

        public static Пз ПолучитьДополнительнуюЗарплату(Пз ЗаработнаяПлата)
        {
            var значение = Math.Round(ЗаработнаяПлата.Значение * (1 + РазмерДополнительнойЗарплаты.Значение), 2);
            return Пз.Новый("ДополнительнаяЗарплата", значение);
        }

        public static Пз ПолучитьСтраховыеОтчисленияВоВнебюджетныеФонды(Пз ИтоговаяДополнительнаяЗарплата)
        {
            var значение = Math.Round(ИтоговаяДополнительнаяЗарплата.Значение * 0.3, 2);
            return Пз.Новый("СтраховыеОтчисленияВоВнебюджетныеФонды", значение);
        }

        #endregion

        #region 2.4 Расчёт амортизационных отчислений

        public static Пз ПолучитьАмортизацию(Пз Сn, Пз n, Пз На)
        {
            var значение = Math.Round(Сn.Значение * n.Значение * На.Значение, 2);
            return Пз.Новый("Амортизация", значение);
        }

        #endregion

        #region 2.5 Смета затрат на производство продукции

        public static Пз ПолучитьЦеховыеЗатраты(Пз ЗарплатаОсновныхРабочих, Пз ДополнительнаяЗарплатаОсновныхРабочих, Пз ОтчисленияВСтраховыеФондыОтЗарплатыОсновныхРабочих, Пз Материалы)
        {
            var значение = ЗарплатаОсновныхРабочих.Значение + ДополнительнаяЗарплатаОсновныхРабочих.Значение
            + ОтчисленияВСтраховыеФондыОтЗарплатыОсновныхРабочих.Значение + Материалы.Значение;
            return Пз.Новый("ЦеховыеЗатраты", значение);
        }

        public static Пз ПолучитьОбщепроизводственныеЗатраты(Пз ЗарплатаВспомогательныхРабочих, Пз ДополнительнаяЗарплатаВспомогательныхРабочих, Пз ОтчисленияВСтраховыеФондыОтЗарплатыВспомогательныхРабочих, Пз ЗарплатаСпециалистовИСлужащих, Пз ДополнительнаяЗарплатаСпециалистовИСлужащих, Пз ОтчисленияВСтраховыеФондыОтЗарплатыСпециалистовИСлужащих, Пз Амортизация, Пз Электроэнергия)
        {
            var значение = ЗарплатаВспомогательныхРабочих.Значение + ДополнительнаяЗарплатаВспомогательныхРабочих.Значение
            + ОтчисленияВСтраховыеФондыОтЗарплатыВспомогательныхРабочих.Значение
            + ЗарплатаСпециалистовИСлужащих.Значение + ДополнительнаяЗарплатаСпециалистовИСлужащих.Значение
            + ОтчисленияВСтраховыеФондыОтЗарплатыСпециалистовИСлужащих.Значение
            + Амортизация.Значение + Электроэнергия.Значение;
            return Пз.Новый("ОбщепроизводственныеЗатраты", значение);
        }

        public static Пз ПолучитьИтоговыеЗатратыНаПроизводство(Пз ЦеховыеЗатраты, Пз ОбщепроизводственныеЗатраты)
        {
            var значение = ЦеховыеЗатраты.Значение + ОбщепроизводственныеЗатраты.Значение;
            return Пз.Новый("ИтоговыеЗатратыНаПроизводство", значение);
        }

        #endregion

        #region 2.6 Общехозяйственные расходы

        public static Пз ПолучитьОбщехозяйственныеРасходы(Пз ЗарплатаОсновныхРабочих, Пз РазмерОбщехозяйственныхРасходов)
        {
            var значение = ЗарплатаОсновныхРабочих.Значение * РазмерОбщехозяйственныхРасходов.Значение;
            return Пз.Новый("ОбщехозяйственныеРасходы", значение);
        }

        #endregion

        #region 2.7 Коммерческие расходы

        public static Пз ПолучитьКоммерческиеРасходы(Пз ЗарплатаОсновныхРабочих, Пз Нк)
        {
            var значение = Math.Round(ЗарплатаОсновныхРабочих.Значение * Нк.Значение, 2);
            return Пз.Новый("КоммерческиеРасходы", значение);
        }

        #endregion

        #region 2.8 Калькуляционная себестоимость

        public static Пз ПолучитьПолнуюСебестоимость(Пз Материалы, Пз ЗарплатаОсновныхРабочих, Пз СтраховыеВзносыОтЗарплатыОсновныхРабочих, Пз ОбщепроизводственныеРасходы, Пз ОбщехозяйственныеРасходы, Пз КоммерческиеРасходы)
        {
            var значение = Материалы.Значение + ЗарплатаОсновныхРабочих.Значение
            + СтраховыеВзносыОтЗарплатыОсновныхРабочих.Значение
            + ОбщепроизводственныеРасходы.Значение
            + ОбщехозяйственныеРасходы.Значение
            + КоммерческиеРасходы.Значение;
            return Пз.Новый("ПолнаяСебестоимость", значение);
        }

        public static Пз ПолучитьДолюВПолнойСебестоимости(Пз Сумма, Пз ПолнаяСебестоимость)
        {
            if (ПолнаяСебестоимость.Значение == 0)
                throw new DivideByZeroException("Аргумент ПолнаяСебестоимость не должен быть равен 0.");

            var значение = Math.Round(Сумма.Значение / ПолнаяСебестоимость.Значение, 2) * 100;
            return Пз.Новый("ДолюВПолнойСебестоимости", значение, ЕдиницаИзмерения.Проценты);
        }

        public static Пз ПолучитьСебестоимостьЕдиницыПродукции(Пз ПолнаяСебестоимость, Пз Впл)
        {
            if (Впл.Значение == 0)
                throw new DivideByZeroException("Аргумент Впл не должен быть равен 0.");

            var значение = Math.Round(ПолнаяСебестоимость.Значение / Впл.Значение, 2);
            return Пз.Новый("СебестоимостьЕдиницыПродукции", значение);
        }

        #endregion

        #region 2.9 Расчёт оптовой цены изделия

        public static Пз ПолучитьОптовуюЦенуПредприятия(Пз Сед, Пз Нп)
        {
            var значение = Math.Round(Сед.Значение * Нп.Значение, 2);
            return Пз.Новый("ОптоваяЦенаПредприятия", значение);
        }

        public static Пз ПолучитьОптовуюЦенуИзделия(Пз Сед, Пз Пн)
        {
            var значение = Сед.Значение + Пн.Значение;
            return Пз.Новый("ОптоваяЦенаИзделия", значение);
        }

        public static Пз ПолучитьОтпускнуюЦенуИзделия(Пз Цоп)
        {
            var значение = Цоп.Значение + (Цоп.Значение * НДС.Значение);
            return Пз.Новый("ОтпускнаяЦенаИзделия", значение);
        }

        #endregion

        #region 2.10 Определение показателей продукции

        public static Пз ПолучитьТоварнуюПродукцию(Пз Впл, Пз Цотп)
        {
            var значение = Впл.Значение * Цотп.Значение;
            return Пз.Новый("ТоварнаяПродукция", значение);
        }

        public static Пз ПолучитьВаловуюПродукцию(Пз ТП, Пз Рнп, Пз Цотп)
        {
            var значение = Math.Round(ТП.Значение + Рнп.Значение * Цотп.Значение, 2);
            return Пз.Новый("ВаловаяПродукция", значение);
        }

        public static Пз ПолучитьРеализованнуюПродукцию(Пз ТП, Пз Онг, Пз Окг, Пз Цоп)
        {
            var значение = Math.Round(ТП.Значение + (Онг.Значение * Цоп.Значение) - (Окг.Значение * Цоп.Значение), 2);
            return Пз.Новый("РеализованнаяПродукция", значение);
        }

        #endregion

        #region 2.11 Расчёт прибыли и рентабельности

        public static Пз ПолучитьПрибыль(Пз Треал, Пз Ск, Пз Цоп, Пз Впл, Пз Онг, Пз Окг)
        {
            var значение = Math.Round(Треал.Значение - Ск.Значение - (НДС.Значение * Цоп.Значение
                * (Впл.Значение + Онг.Значение - Окг.Значение)), 2);
            return Пз.Новый("Прибыль", значение);
        }

        public static Пз ПолучитьРентабельность(Пз Прибыль, Пз Ск)
        {
            if (Ск.Значение == 0)
                throw new DivideByZeroException("Аргумент Ск не должен быть равен 0.");

            var значение = Math.Round(Прибыль.Значение * 100 / Ск.Значение, 2);
            return Пз.Новый("Рентабельность", значение * 100, ЕдиницаИзмерения.Проценты);
        }

        #endregion
    }
}
